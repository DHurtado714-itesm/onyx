{"ast":null,"code":"import { getClientIdCache } from \"../../cache/auth\";\nimport { BITACORA_ROUTE } from \"../index\";\n// Messages complete\nexport const createEntry = async body => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(`${BITACORA_ROUTE}/new`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n// Messages complete\nexport const getEntries = async date => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(`${BITACORA_ROUTE}/${date}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    const resData = await res.json();\n\n    // return resData.data;\n    return resData;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n// Messages complete\nexport const getEntry = async id => {\n  try {\n    // token is clientId\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(`${BITACORA_ROUTE}/consultar-entrada/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    const resData = await res.json();\n\n    // return resData.data;\n    return resData;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n// TODO: messages\nexport const updateEntry = async (id, aDate, title, content) => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      throw new Error(\"Something went wrong\");\n    }\n    const res = await fetch(`${BITACORA_ROUTE}/consultar-entrada/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify({\n        id,\n        aDate,\n        title,\n        content\n      })\n    });\n    console.log(res);\n    if (res.status !== 200) {\n      throw new Error(\"Something went wrong\");\n    }\n    const resData = await res.json();\n    return resData.data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};","map":{"version":3,"names":["getClientIdCache","BITACORA_ROUTE","createEntry","body","token","res","fetch","method","headers","Authorization","JSON","stringify","data","json","error","console","getEntries","date","resData","getEntry","id","updateEntry","aDate","title","content","Error","log","status"],"sources":["C:/Users/danie/Documents/natgas/client/src/routes/bitacora/bitacora.routes.ts"],"sourcesContent":["import { getClientIdCache } from \"../../cache/auth\";\r\nimport { BITACORA_ROUTE } from \"../index\";\r\nimport { IData } from \"../routes.types\";\r\n\r\ninterface ICreateEntry {\r\n\taDate: Date;\r\n\ttitle: string;\r\n\tcontent: string;\r\n}\r\n\r\n// Messages complete\r\nexport const createEntry = async (\r\n\tbody: ICreateEntry\r\n): Promise<null | IData<any>> => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\t\t// deserialize\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/new`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(body),\r\n\t\t});\r\n\r\n\t\tconst data = await res.json();\r\n\t\treturn data;\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport interface IGetEntriesData {\r\n\taDate: string;\r\n\tcontent: string;\r\n\ttitle: string;\r\n}\r\n\r\n// Messages complete\r\nexport const getEntries = async (\r\n\tdate: Date\r\n): Promise<IData<IGetEntriesData[]> | null> => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\t\t// deserialize\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/${date}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst resData = await res.json();\r\n\r\n\t\t// return resData.data;\r\n\t\treturn resData;\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport interface IGetEntryData {\r\n\taDate: string;\r\n\tcontent: string;\r\n\ttitle: string;\r\n}\r\n\r\n// Messages complete\r\nexport const getEntry = async (\r\n\tid: string\r\n): Promise<IData<IGetEntriesData[]> | null> => {\r\n\ttry {\r\n\t\t// token is clientId\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\t\t// deserialize\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/consultar-entrada/${id}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\t\tconst resData = await res.json();\r\n\r\n\t\t// return resData.data;\r\n\t\treturn resData;\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport interface IEditEntriesData {\r\n\taDate: string;\r\n\tcontent: string;\r\n\ttitle: string;\r\n}\r\n\r\n// TODO: messages\r\nexport const updateEntry = async (\r\n\tid: string,\r\n\taDate: Date,\r\n\ttitle: string,\r\n\tcontent: string\r\n): Promise<IEditEntriesData[] | null> => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t}\r\n\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/consultar-entrada/${id}`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({ id, aDate, title, content }),\r\n\t\t});\r\n\r\n\t\tconsole.log(res);\r\n\r\n\t\tif (res.status !== 200) {\r\n\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t}\r\n\r\n\t\tconst resData = await res.json();\r\n\r\n\t\treturn resData.data as IEditEntriesData[];\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}