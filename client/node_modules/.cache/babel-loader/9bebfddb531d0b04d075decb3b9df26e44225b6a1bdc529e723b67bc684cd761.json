{"ast":null,"code":"import { getClientIdCache } from \"../../cache/auth\";\nimport { EXERCISE_ROUTE } from \"../index\";\nexport const newExercise = async body => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n    const res = await fetch(`${EXERCISE_ROUTE}/crear-ejercicio`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const getAll = async filtro => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) return null;\n    const res = await fetch(`${EXERCISE_ROUTE}?filtro=${filtro}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    });\n    const data = await res.json();\n    if (data === null || data === undefined) return null;\n    return data;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};","map":{"version":3,"names":["getClientIdCache","EXERCISE_ROUTE","newExercise","body","token","res","fetch","method","headers","JSON","stringify","data","json","error","console","getAll","filtro","undefined","log"],"sources":["C:/Users/danie/Documents/natgas/client/src/routes/exercise/exercise.routes.ts"],"sourcesContent":["import { getClientIdCache } from \"../../cache/auth\";\r\nimport { EXERCISE_ROUTE } from \"../index\";\r\nimport { IData } from \"../routes.types\";\r\n\r\ninterface IExercise {\r\n\tnombre: string;\r\n\tdescription: string;\r\n\timageSrc: string;\r\n}\r\n\r\nexport const newExercise = async (\r\n\tbody: IExercise\r\n): Promise<null | IData<any>> => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst res = await fetch(`${EXERCISE_ROUTE}/crear-ejercicio`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t\"Authorization\": token,\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(body),\r\n\t\t});\r\n\r\n\t\tconst data = await res.json();\r\n\t\treturn data;\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport const getAll = async (filtro: string): Promise<null| IData<any>> => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) return null;\r\n\r\n\t\tconst res = await fetch(`${EXERCISE_ROUTE}?filtro=${filtro}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t\"Authorization\": token,\r\n\t\t\t},\r\n\t\t\t\r\n\t\t});\r\n\r\n\t\tconst data = await res.json();\r\n\r\n\t\tif (data === null || data === undefined) return null;\r\n\t\treturn data;\r\n\t\t\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t\treturn null;\r\n\t}\r\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,cAAc,QAAQ,UAAU;AASzC,OAAO,MAAMC,WAAW,GAAG,MAC1BC,IAAe,IACiB;EAChC,IAAI;IACH,MAAMC,KAAK,GAAGJ,gBAAgB,EAAE;IAEhC,IAAII,KAAK,KAAK,IAAI,EAAE;MACnB,OAAO,IAAI;IACZ;IAEA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEL,cAAe,kBAAiB,EAAE;MAC5DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACR,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEJ;MAClB,CAAC;MACDD,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;IAC1B,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,EAAE;IAC7B,OAAOD,IAAI;EACZ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACfC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAI;EACZ;AACD,CAAC;AAED,OAAO,MAAME,MAAM,GAAG,MAAOC,MAAc,IAAgC;EAC1E,IAAI;IACH,MAAMZ,KAAK,GAAGJ,gBAAgB,EAAE;IAEhC,IAAII,KAAK,KAAK,IAAI,EAAE,OAAO,IAAI;IAE/B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEL,cAAe,WAAUe,MAAO,EAAC,EAAE;MAC7DT,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACR,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEJ;MAClB;IAED,CAAC,CAAC;IAEF,MAAMO,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,EAAE;IAE7B,IAAID,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKM,SAAS,EAAE,OAAO,IAAI;IACpD,OAAON,IAAI;EAEZ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACfC,OAAO,CAACI,GAAG,CAACL,KAAK,CAAC;IAClB,OAAO,IAAI;EACZ;AACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}