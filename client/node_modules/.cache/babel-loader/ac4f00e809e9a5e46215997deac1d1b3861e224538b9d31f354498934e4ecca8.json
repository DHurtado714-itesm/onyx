{"ast":null,"code":"import { getClientIdCache } from \"../../cache/auth\";\nimport { BITACORA_ROUTE } from \"../index\";\nexport const createEntry = async body => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(`${BITACORA_ROUTE}/new`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(body)\n    });\n    const resData = await res.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getEntries = async date => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(`${BITACORA_ROUTE}/${date}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    const resData = await res.json();\n    return resData.data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const getEntry = async id => {\n  try {\n    // token is clientId\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(`${BITACORA_ROUTE}/${id}/${token}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    const resData = await res.json();\n    return resData.data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const editEntries = async (id, date) => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(`${BITACORA_ROUTE}/${id}/${date}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    const resData = await res.json();\n    return resData.data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};","map":{"version":3,"names":["getClientIdCache","BITACORA_ROUTE","createEntry","body","token","res","fetch","method","headers","Authorization","JSON","stringify","resData","json","error","console","getEntries","date","data","getEntry","id","editEntries"],"sources":["C:/Users/danie/Documents/natgas/client/src/routes/bitacora/bitacora.routes.ts"],"sourcesContent":["import { getClientIdCache } from \"../../cache/auth\";\r\nimport { BITACORA_ROUTE } from \"../index\";\r\n\r\ninterface ICreateEntry {\r\n\taDate: Date;\r\n\ttitle: string;\r\n\tcontent: string;\r\n}\r\n\r\nexport const createEntry = async (body: ICreateEntry) => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\t\t// deserialize\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/new`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(body),\r\n\t\t});\r\n\r\n\t\tconst resData = await res.json();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\nexport interface IGetEntriesData {\r\n\taDate: string;\r\n\tcontent: string;\r\n\ttitle: string;\r\n}\r\n\r\nexport const getEntries = async (\r\n\tdate: Date\r\n): Promise<IGetEntriesData[] | null> => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\t\t// deserialize\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/${date}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst resData = await res.json();\r\n\r\n\t\treturn resData.data;\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport interface IGetEntryData {\r\n\taDate: string;\r\n\tcontent: string;\r\n\ttitle: string;\r\n}\r\n\r\nexport const getEntry = async (\r\n\tid: string\r\n): Promise<IGetEntriesData[] | null> => {\r\n\ttry {\r\n\t\t// token is clientId\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\t\t// deserialize\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/${id}/${token}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst resData = await res.json();\r\n\r\n\t\treturn resData.data;\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport interface IEditEntriesData {\r\n\taDate: string;\r\n\tcontent: string;\r\n\ttitle: string;\r\n}\r\n\r\nexport const editEntries = async (\r\n\tid: string,\r\n\tdate: Date\r\n): Promise<IEditEntriesData[] | null> => {\r\n\ttry {\r\n\t\tconst token = getClientIdCache();\r\n\r\n\t\tif (token === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\t\t// deserialize\r\n\t\tconst res = await fetch(`${BITACORA_ROUTE}/${id}/${date}`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst resData = await res.json();\r\n\r\n\t\treturn resData.data;\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}