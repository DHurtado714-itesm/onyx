{"ast":null,"code":"import { AUTH_ROUTE, CLIENT_ROUTE } from \"../index\";\nimport { getClientIdCache } from \"../../cache/auth\";\n\n// Messages complete\nexport const getAuthClient = async () => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n    const res = await fetch(AUTH_ROUTE, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    });\n    const data = await res.json();\n    if (data === null || data === undefined) {\n      return null;\n    }\n\n    // return data.data.user;\n    return data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n  ;\n};\n// TODO: messages\nexport const registerClient = async body => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n    const res = await fetch(`${CLIENT_ROUTE}/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await res.json();\n    if (data === null || data === undefined) {\n      return null;\n    }\n\n    // return data.data.user;\n    return data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n  ;\n};","map":{"version":3,"names":["AUTH_ROUTE","CLIENT_ROUTE","getClientIdCache","getAuthClient","token","res","fetch","method","headers","data","json","undefined","error","console","registerClient","body","JSON","stringify"],"sources":["C:/Users/danie/Documents/natgas/client/src/routes/auth/auth.routes.ts"],"sourcesContent":["import { AUTH_ROUTE, CLIENT_ROUTE } from \"../index\";\r\nimport { IUser } from \"../../interfaces/User.interfaces\";\r\nimport type { IData } from \"../routes.types\";\r\nimport { getClientIdCache } from \"../../cache/auth\";\r\n\r\n// Messages complete\r\nexport const getAuthClient = async (): Promise<IData<{\r\n    user: IUser\r\n}> | null> => {\r\n    try {\r\n        const token = getClientIdCache();\r\n\r\n        if (token === null) {\r\n            return null;\r\n        }\r\n\r\n        const res = await fetch(AUTH_ROUTE, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": token\r\n            }\r\n        });\r\n        const data = await res.json();\r\n\r\n        if (data === null || data === undefined) {\r\n            return null;\r\n        }\r\n\r\n        // return data.data.user;\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface IRegisterBody {\r\n    username: string;\r\n    height: number;\r\n    weight: number;\r\n    dateOfBirth: Date;\r\n    goal: string;\r\n    level: string;\r\n    sex: \"F\" | \"M\";\r\n}\r\n\r\n// TODO: messages\r\nexport const registerClient = async (body: IRegisterBody): Promise<IData<{\r\n    user: IUser\r\n}> | null> => {\r\n    try {\r\n        const token = getClientIdCache();\r\n\r\n        if (token === null) {\r\n            return null;\r\n        }\r\n\r\n        const res = await fetch(`${CLIENT_ROUTE}/register`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": token\r\n            },\r\n            body: JSON.stringify(body)\r\n        });\r\n        const data = await res.json();\r\n\r\n        if (data === null || data === undefined) {\r\n            return null;\r\n        }\r\n\r\n        // return data.data.user;\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return null;\r\n    };\r\n}"],"mappings":"AAAA,SAASA,UAAU,EAAEC,YAAY,QAAQ,UAAU;AAGnD,SAASC,gBAAgB,QAAQ,kBAAkB;;AAEnD;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAEf;EACV,IAAI;IACA,MAAMC,KAAK,GAAGF,gBAAgB,EAAE;IAEhC,IAAIE,KAAK,KAAK,IAAI,EAAE;MAChB,OAAO,IAAI;IACf;IAEA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACN,UAAU,EAAE;MAChCO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEJ;MACrB;IACJ,CAAC,CAAC;IACF,MAAMK,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,EAAE;IAE7B,IAAID,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKE,SAAS,EAAE;MACrC,OAAO,IAAI;IACf;;IAEA;IACA,OAAOF,IAAI;EACf,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAI;EACf;EAAC;AACL,CAAC;AAYD;AACA,OAAO,MAAME,cAAc,GAAG,MAAOC,IAAmB,IAE1C;EACV,IAAI;IACA,MAAMX,KAAK,GAAGF,gBAAgB,EAAE;IAEhC,IAAIE,KAAK,KAAK,IAAI,EAAE;MAChB,OAAO,IAAI;IACf;IAEA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEL,YAAa,WAAU,EAAE;MAChDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEJ;MACrB,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACF,IAAI;IAC7B,CAAC,CAAC;IACF,MAAMN,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,EAAE;IAE7B,IAAID,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKE,SAAS,EAAE;MACrC,OAAO,IAAI;IACf;;IAEA;IACA,OAAOF,IAAI;EACf,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAI;EACf;EAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}