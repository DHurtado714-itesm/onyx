{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Documents\\\\natgas\\\\client\\\\src\\\\pages\\\\Progreso\\\\Data\\\\Data.tsx\";\nimport React from 'react';\nimport styles from \"../style.module.css\";\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapBorderColor = new Map();\nmapBorderColor.set(\"weight\", \"#FF6159\");\nmapBorderColor.set(\"neck\", \"#50514F\");\nmapBorderColor.set(\"chest\", \"#B63D96\");\nmapBorderColor.set(\"leftarm\", \"#68954F\");\nmapBorderColor.set(\"rightarm\", \"#54B399\");\nmapBorderColor.set(\"leftforearm\", \"#FF6159\");\nmapBorderColor.set(\"rightforearm\", \"#805EA5\");\nmapBorderColor.set(\"waist\", \"#BF2727\");\nmapBorderColor.set(\"hip\", \"#322F87\");\nmapBorderColor.set(\"leftleg\", '#247BA0');\nmapBorderColor.set(\"rightleg\", '#5B1B18');\nmapBorderColor.set(\"leftcalve\", '#292828');\nmapBorderColor.set(\"rightcalve\", '#DDBB21');\nconst options = {\n  responsive: true,\n  maintainAspectRatio: true,\n  plugins: {\n    legend: {\n      display: false\n    }\n  },\n  scales: {\n    x: {\n      grid: {\n        display: true,\n        color: \"rgba(255, 255, 255, 0.2)\"\n      }\n    },\n    y: {\n      grid: {\n        display: true,\n        color: \"rgba(255, 255, 255, 0.2)\"\n      }\n    }\n  }\n};\nexport const Data = _ref => {\n  let {\n    data\n  } = _ref;\n  const getArrayDates = () => {\n    const arr = new Set();\n    for (let i = 0; i < Object.keys(data).length; i++) {\n      const key = Object.keys(data)[i];\n      const value = data[key];\n      for (let j = 0; j < value.dates.length; j++) {\n        const date = new Date(value.dates[j]);\n        // arr.add(`${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`);\n        arr.add(date);\n      }\n    }\n    return arr;\n  };\n  const getAllDatasets = () => {\n    const arr = [];\n    for (let i = 0; i < Object.keys(data).length; i++) {\n      const key = Object.keys(data)[i];\n      const value = data[key];\n      arr.push({\n        label: key,\n        data: value.measurements,\n        borderColor: mapBorderColor.get(key) || \"#FFFFFF\",\n        backgroundColor: \"#FFFFFF\"\n      });\n    }\n    return arr;\n  };\n  const getDatasets = () => {\n    console.log(Array.from(getArrayDates()).sort());\n    return {\n      labels: Array.from(getArrayDates()).sort(),\n      datasets: getAllDatasets()\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    className: styles.inside_graph,\n    options: options,\n    data: getDatasets()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_c = Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","styles","Line","jsxDEV","_jsxDEV","mapBorderColor","Map","set","options","responsive","maintainAspectRatio","plugins","legend","display","scales","x","grid","color","y","Data","_ref","data","getArrayDates","arr","Set","i","Object","keys","length","key","value","j","dates","date","Date","add","getAllDatasets","push","label","measurements","borderColor","get","backgroundColor","getDatasets","console","log","Array","from","sort","labels","datasets","className","inside_graph","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/danie/Documents/natgas/client/src/pages/Progreso/Data/Data.tsx"],"sourcesContent":["import React from 'react'\r\nimport styles from \"../style.module.css\"\r\nimport { Line } from 'react-chartjs-2';\r\nimport { IMesaurements, IDataset } from \"../Progress.types\";\r\n\r\ninterface Props {\r\n  data: IMesaurements;\r\n}\r\n\r\nconst mapBorderColor: Map<string, string> = new Map();\r\nmapBorderColor.set(\"weight\", \"#FF6159\");\r\nmapBorderColor.set(\"neck\", \"#50514F\");\r\nmapBorderColor.set(\"chest\", \"#B63D96\");\r\nmapBorderColor.set(\"leftarm\", \"#68954F\");\r\nmapBorderColor.set(\"rightarm\", \"#54B399\");\r\nmapBorderColor.set(\"leftforearm\", \"#FF6159\");\r\nmapBorderColor.set(\"rightforearm\", \"#805EA5\");\r\nmapBorderColor.set(\"waist\", \"#BF2727\");\r\nmapBorderColor.set(\"hip\", \"#322F87\");\r\nmapBorderColor.set(\"leftleg\", '#247BA0');\r\nmapBorderColor.set(\"rightleg\", '#5B1B18');\r\nmapBorderColor.set(\"leftcalve\", '#292828');\r\nmapBorderColor.set(\"rightcalve\", '#DDBB21');\r\n\r\nconst options = {\r\n  responsive: true,\r\n\r\n  maintainAspectRatio: true,\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n  },\r\n  scales: {\r\n    x: {\r\n      grid: {\r\n        display: true,\r\n        color: \"rgba(255, 255, 255, 0.2)\",\r\n      }\r\n    },\r\n    y: {\r\n      grid: {\r\n        display: true,\r\n        color: \"rgba(255, 255, 255, 0.2)\",\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\n\r\nexport const Data = ({\r\n  data\r\n}: Props) => {\r\n\r\n  const getArrayDates = (): Set<Date> => {\r\n    const arr: Set<Date> = new Set();\r\n\r\n    for (let i = 0; i < Object.keys(data).length; i++) {\r\n      const key = Object.keys(data)[i];\r\n      const value = data[key];\r\n\r\n      for (let j = 0; j < value.dates.length; j++) {\r\n        const date = new Date(value.dates[j]);\r\n        // arr.add(`${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`);\r\n        arr.add(date);\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  };\r\n\r\n  const getAllDatasets = (): Array<IDataset> => {\r\n    const arr: Array<IDataset> = [];\r\n\r\n    for (let i = 0; i < Object.keys(data).length; i++) {\r\n      const key = Object.keys(data)[i];\r\n      const value = data[key];\r\n\r\n      arr.push({\r\n        label: key,\r\n        data: value.measurements,\r\n        borderColor: mapBorderColor.get(key) || \"#FFFFFF\",\r\n        backgroundColor: \"#FFFFFF\"\r\n      })\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  const getDatasets = (): any => {      \r\n    console.log(Array.from(getArrayDates()).sort());  \r\n    return {      \r\n      labels: Array.from(getArrayDates()).sort(),\r\n      datasets: getAllDatasets()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Line className={styles.inside_graph} options={options} data={getDatasets()}></Line>\r\n  )\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOvC,MAAMC,cAAmC,GAAG,IAAIC,GAAG,EAAE;AACrDD,cAAc,CAACE,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC;AACvCF,cAAc,CAACE,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC;AACrCF,cAAc,CAACE,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AACtCF,cAAc,CAACE,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC;AACxCF,cAAc,CAACE,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC;AACzCF,cAAc,CAACE,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC;AAC5CF,cAAc,CAACE,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC;AAC7CF,cAAc,CAACE,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AACtCF,cAAc,CAACE,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC;AACpCF,cAAc,CAACE,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC;AACxCF,cAAc,CAACE,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC;AACzCF,cAAc,CAACE,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC;AAC1CF,cAAc,CAACE,GAAG,CAAC,YAAY,EAAE,SAAS,CAAC;AAE3C,MAAMC,OAAO,GAAG;EACdC,UAAU,EAAE,IAAI;EAEhBC,mBAAmB,EAAE,IAAI;EACzBC,OAAO,EAAE;IACPC,MAAM,EAAE;MACNC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,MAAM,EAAE;IACNC,CAAC,EAAE;MACDC,IAAI,EAAE;QACJH,OAAO,EAAE,IAAI;QACbI,KAAK,EAAE;MACT;IACF,CAAC;IACDC,CAAC,EAAE;MACDF,IAAI,EAAE;QACJH,OAAO,EAAE,IAAI;QACbI,KAAK,EAAE;MACT;IACF;EACF;AAEF,CAAC;AAED,OAAO,MAAME,IAAI,GAAGC,IAAA,IAEP;EAAA,IAFQ;IACnBC;EACK,CAAC,GAAAD,IAAA;EAEN,MAAME,aAAa,GAAGA,CAAA,KAAiB;IACrC,MAAMC,GAAc,GAAG,IAAIC,GAAG,EAAE;IAEhC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,MAAM,EAAEH,CAAC,EAAE,EAAE;MACjD,MAAMI,GAAG,GAAGH,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACI,CAAC,CAAC;MAChC,MAAMK,KAAK,GAAGT,IAAI,CAACQ,GAAG,CAAC;MAEvB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,KAAK,CAACJ,MAAM,EAAEG,CAAC,EAAE,EAAE;QAC3C,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACJ,KAAK,CAACE,KAAK,CAACD,CAAC,CAAC,CAAC;QACrC;QACAR,GAAG,CAACY,GAAG,CAACF,IAAI,CAAC;MACf;IACF;IAEA,OAAOV,GAAG;EACZ,CAAC;EAED,MAAMa,cAAc,GAAGA,CAAA,KAAuB;IAC5C,MAAMb,GAAoB,GAAG,EAAE;IAE/B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,MAAM,EAAEH,CAAC,EAAE,EAAE;MACjD,MAAMI,GAAG,GAAGH,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACI,CAAC,CAAC;MAChC,MAAMK,KAAK,GAAGT,IAAI,CAACQ,GAAG,CAAC;MAEvBN,GAAG,CAACc,IAAI,CAAC;QACPC,KAAK,EAAET,GAAG;QACVR,IAAI,EAAES,KAAK,CAACS,YAAY;QACxBC,WAAW,EAAEnC,cAAc,CAACoC,GAAG,CAACZ,GAAG,CAAC,IAAI,SAAS;QACjDa,eAAe,EAAE;MACnB,CAAC,CAAC;IACJ;IAEA,OAAOnB,GAAG;EACZ,CAAC;EAED,MAAMoB,WAAW,GAAGA,CAAA,KAAW;IAC7BC,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,IAAI,CAACzB,aAAa,EAAE,CAAC,CAAC0B,IAAI,EAAE,CAAC;IAC/C,OAAO;MACLC,MAAM,EAAEH,KAAK,CAACC,IAAI,CAACzB,aAAa,EAAE,CAAC,CAAC0B,IAAI,EAAE;MAC1CE,QAAQ,EAAEd,cAAc;IAC1B,CAAC;EACH,CAAC;EAED,oBACEhC,OAAA,CAACF,IAAI;IAACiD,SAAS,EAAElD,MAAM,CAACmD,YAAa;IAAC5C,OAAO,EAAEA,OAAQ;IAACa,IAAI,EAAEsB,WAAW;EAAG;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAQ;AAExF,CAAC;AAAAC,EAAA,GAlDYtC,IAAI;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}