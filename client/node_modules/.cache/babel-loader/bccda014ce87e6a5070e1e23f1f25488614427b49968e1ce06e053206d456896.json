{"ast":null,"code":"import { getClientIdCache } from \"../../cache/auth\";\nimport { BITACORA_ROUTE } from \"../index\";\nexport const createEntry = async body => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n    console.log(\"body:\", body);\n\n    // serialize\n    // deserialize\n    const res = await fetch(BITACORA_ROUTE + \"/bitacora/new\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      },\n      body: JSON.stringify(body)\n    });\n    const resData = await res.json();\n    console.log(\"resData:\", resData);\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getEntries = async date => {\n  try {\n    const token = getClientIdCache();\n    if (token === null) {\n      return null;\n    }\n\n    // serialize\n    // deserialize\n    const res = await fetch(BITACORA_ROUTE + \"/bitacora/\" + date, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    });\n    const resData = await res.json();\n    return resData.data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};","map":{"version":3,"names":["getClientIdCache","BITACORA_ROUTE","createEntry","body","token","console","log","res","fetch","method","headers","JSON","stringify","resData","json","error","getEntries","date","data"],"sources":["C:/Users/danie/Documents/natgas/client/src/routes/bitacora/bitacora.routes.ts"],"sourcesContent":["import { getClientIdCache } from \"../../cache/auth\";\r\nimport { BITACORA_ROUTE } from \"../index\";\r\n\r\ninterface ICreateEntry {\r\n    aDate: Date;\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nexport const createEntry = async (body: ICreateEntry) => {\r\n    try {\r\n\r\n        const token = getClientIdCache();\r\n\r\n        if (token === null) {\r\n            return null;\r\n        }\r\n\r\n        console.log(\"body:\", body);\r\n\r\n        // serialize\r\n        // deserialize\r\n        const res = await fetch(BITACORA_ROUTE + \"/bitacora/new\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": token\r\n            },\r\n            body: JSON.stringify(body)\r\n        });\r\n\r\n        const resData = await res.json();\r\n\r\n        console.log(\"resData:\", resData);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport interface IGetEntriesData {\r\n    aDate: string;\r\n    content: string;\r\n    title: string;\r\n}\r\n\r\nexport const getEntries = async (date: Date): Promise<IGetEntriesData[] | null> => {\r\n    try {\r\n\r\n        const token = getClientIdCache();\r\n\r\n        if (token === null) {\r\n            return null;\r\n        }\r\n\r\n        // serialize\r\n        // deserialize\r\n        const res = await fetch(BITACORA_ROUTE + \"/bitacora/\" + date, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": token\r\n            }\r\n        });\r\n\r\n        const resData = await res.json();\r\n\r\n        return resData.data;\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        return null;\r\n    }\r\n};"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,cAAc,QAAQ,UAAU;AAQzC,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAkB,IAAK;EACrD,IAAI;IAEA,MAAMC,KAAK,GAAGJ,gBAAgB,EAAE;IAEhC,IAAII,KAAK,KAAK,IAAI,EAAE;MAChB,OAAO,IAAI;IACf;IAEAC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,IAAI,CAAC;;IAE1B;IACA;IACA,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAACP,cAAc,GAAG,eAAe,EAAE;MACtDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEN;MACrB,CAAC;MACDD,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAACT,IAAI;IAC7B,CAAC,CAAC;IAEF,MAAMU,OAAO,GAAG,MAAMN,GAAG,CAACO,IAAI,EAAE;IAEhCT,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEO,OAAO,CAAC;EAEpC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZV,OAAO,CAACU,KAAK,CAACA,KAAK,CAAC;EACxB;AACJ,CAAC;AAQD,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAU,IAAwC;EAC/E,IAAI;IAEA,MAAMb,KAAK,GAAGJ,gBAAgB,EAAE;IAEhC,IAAII,KAAK,KAAK,IAAI,EAAE;MAChB,OAAO,IAAI;IACf;;IAEA;IACA;IACA,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACP,cAAc,GAAG,YAAY,GAAGgB,IAAI,EAAE;MAC1DR,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEN;MACrB;IACJ,CAAC,CAAC;IAEF,MAAMS,OAAO,GAAG,MAAMN,GAAG,CAACO,IAAI,EAAE;IAEhC,OAAOD,OAAO,CAACK,IAAI;EAEvB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZV,OAAO,CAACU,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAI;EACf;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}