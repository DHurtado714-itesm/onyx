{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Documents\\\\natgas\\\\client\\\\src\\\\layouts\\\\Messages\\\\Messages.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, createContext } from 'react';\nimport MessagesModal from '../../components/Modals/Messages/Messages';\nimport styles from './Messages.module.css';\n\n// Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MessagesContext = /*#__PURE__*/createContext({});\nconst Layout = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // Modal messages\n  const [modalMsgs, setModalMsgs] = useState([]);\n  const waitForPressResolveArray = useRef({});\n  const hashSetSeedsMsgs = useRef(new Set());\n  const addAsyncMsg = async text => {\n    // eslint-disable-next-line\n    if (hashSetSeedsMsgs.current.has(text)) return await new Promise(resolve => {\n      resolve(false);\n    });\n    hashSetSeedsMsgs.current.add(text);\n    const waitForPress = async id => {\n      // eslint-disable-next-line\n      return new Promise(resolve => waitForPressResolveArray.current[id] = resolve);\n    };\n\n    // Create unique id\n    const id = String(new Date().getTime() + Math.random());\n\n    // Push msg\n    setModalMsgs(prev => [...prev, {\n      id,\n      text,\n      type: 'ask',\n      isOkCancel: true\n    }]);\n    const resOfBtn = await waitForPress(id);\n    return resOfBtn;\n  };\n  const addStaticMsg = (text, typeMsg) => {\n    if (hashSetSeedsMsgs.current.has(text)) return;\n    hashSetSeedsMsgs.current.add(text);\n\n    // Create unique id\n    const id = String(new Date().getTime() + Math.random());\n\n    // Push msg\n    setModalMsgs(prev => [...prev, {\n      id,\n      text,\n      type: typeMsg,\n      isOkCancel: false\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(MessagesContext.Provider, {\n    value: {\n      modalMsgs,\n      waitForPressResolveArray,\n      hashSetSeedsMsgs,\n      setModalMsgs,\n      addAsyncMsg,\n      addStaticMsg\n    },\n    children: [/*#__PURE__*/_jsxDEV(MessagesModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messages,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(Layout, \"QfaTqIkpjd8KMIS7W5VlE0mC0J0=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useRef","createContext","MessagesModal","styles","jsxDEV","_jsxDEV","MessagesContext","Layout","_ref","_s","children","modalMsgs","setModalMsgs","waitForPressResolveArray","hashSetSeedsMsgs","Set","addAsyncMsg","text","current","has","Promise","resolve","add","waitForPress","id","String","Date","getTime","Math","random","prev","type","isOkCancel","resOfBtn","addStaticMsg","typeMsg","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","className","messages","_c","$RefreshReg$"],"sources":["C:/Users/danie/Documents/natgas/client/src/layouts/Messages/Messages.tsx"],"sourcesContent":["import React, {\r\n    useState,\r\n    useRef,\r\n    createContext,\r\n    Dispatch,\r\n    SetStateAction,\r\n} from 'react';\r\nimport MessagesModal from '../../components/Modals/Messages/Messages';\r\nimport type {\r\n    MESSAGE_MODAL,\r\n    MESSAGE_MODAL_RESOLVERS_DICT,\r\n    MESSAGE_TYPE_MODAL_STATIC,\r\n} from '../../components/Modals/Messages/Messages.types';\r\nimport styles from './Messages.module.css';\r\n\r\n// Context\r\nexport const MessagesContext = createContext({} as LayoutValueProvider);\r\n\r\ninterface LayoutValueProvider {\r\n    modalMsgs: MESSAGE_MODAL[];\r\n    waitForPressResolveArray: React.MutableRefObject<MESSAGE_MODAL_RESOLVERS_DICT>;\r\n    hashSetSeedsMsgs: React.MutableRefObject<Set<string>>;\r\n\r\n    setModalMsgs: Dispatch<SetStateAction<MESSAGE_MODAL[]>>;\r\n    addAsyncMsg: (text: string) => Promise<boolean>;\r\n    addStaticMsg: (text: string, typeMsg: MESSAGE_TYPE_MODAL_STATIC) => void;\r\n}\r\n\r\ninterface Props {\r\n    children: any\r\n}\r\n\r\nconst Layout: React.FunctionComponent<Props> = ({ children }) => {\r\n    // Modal messages\r\n    const [modalMsgs, setModalMsgs] = useState<MESSAGE_MODAL[]>([]);\r\n    const waitForPressResolveArray = useRef<MESSAGE_MODAL_RESOLVERS_DICT>({});\r\n    const hashSetSeedsMsgs = useRef<Set<string>>(new Set());\r\n\r\n    const addAsyncMsg = async (text: string): Promise<boolean> => {\r\n        // eslint-disable-next-line\r\n        if (hashSetSeedsMsgs.current.has(text))\r\n            return await new Promise<boolean>((resolve) => {\r\n                resolve(false);\r\n            });\r\n        hashSetSeedsMsgs.current.add(text);\r\n\r\n        const waitForPress = async (id: string): Promise<boolean> => {\r\n            // eslint-disable-next-line\r\n            return new Promise<boolean>(\r\n                (resolve) => (waitForPressResolveArray.current[id] = resolve)\r\n            );\r\n        };\r\n\r\n        // Create unique id\r\n        const id: string = String(new Date().getTime() + Math.random());\r\n\r\n        // Push msg\r\n        setModalMsgs((prev) => [\r\n            ...prev,\r\n            {\r\n                id,\r\n                text,\r\n                type: 'ask',\r\n                isOkCancel: true,\r\n            },\r\n        ]);\r\n\r\n        const resOfBtn: boolean = await waitForPress(id);\r\n        return resOfBtn;\r\n    };\r\n\r\n    const addStaticMsg = (\r\n        text: string,\r\n        typeMsg: MESSAGE_TYPE_MODAL_STATIC\r\n    ): void => {\r\n        if (hashSetSeedsMsgs.current.has(text)) return;\r\n        hashSetSeedsMsgs.current.add(text);\r\n\r\n        // Create unique id\r\n        const id: string = String(new Date().getTime() + Math.random());\r\n\r\n        // Push msg\r\n        setModalMsgs((prev) => [\r\n            ...prev,\r\n            {\r\n                id,\r\n                text,\r\n                type: typeMsg,\r\n                isOkCancel: false,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return (\r\n        <MessagesContext.Provider\r\n            value={{\r\n                modalMsgs,\r\n                waitForPressResolveArray,\r\n                hashSetSeedsMsgs,\r\n\r\n                setModalMsgs,\r\n                addAsyncMsg,\r\n                addStaticMsg,\r\n            }}\r\n        >\r\n            <MessagesModal />\r\n            <div className={styles.messages}>\r\n                {children}\r\n            </div>\r\n        </MessagesContext.Provider>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}