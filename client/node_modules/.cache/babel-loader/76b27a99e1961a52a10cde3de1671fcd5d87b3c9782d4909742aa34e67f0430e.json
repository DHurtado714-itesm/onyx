{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Documents\\\\natgas\\\\client\\\\src\\\\pages\\\\Progreso\\\\Data\\\\Data.tsx\";\nimport React from 'react';\nimport styles from \"../style.module.css\";\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapBorderColor = new Map();\nmapBorderColor.set(\"weight\", \"#FF6159\");\nmapBorderColor.set(\"neck\", \"#50514F\");\nmapBorderColor.set(\"chest\", \"#B63D96\");\nmapBorderColor.set(\"leftarm\", \"#68954F\");\nmapBorderColor.set(\"rightarm\", \"#54B399\");\nmapBorderColor.set(\"leftforearm\", \"#FF6159\");\nmapBorderColor.set(\"rightforearm\", \"#805EA5\");\nmapBorderColor.set(\"waist\", \"#BF2727\");\nmapBorderColor.set(\"hip\", \"#322F87\");\nmapBorderColor.set(\"leftleg\", '#247BA0');\nmapBorderColor.set(\"rightleg\", '#5B1B18');\nmapBorderColor.set(\"leftcalve\", '#292828');\nmapBorderColor.set(\"rightcalve\", '#DDBB21');\nconst dictionary = new Map();\ndictionary.set('chest', 'Pecho');\ndictionary.set('hip', 'Cadera');\ndictionary.set('leftarm', 'Brazo izq');\ndictionary.set('leftcalve', 'Pantorrilla izq');\ndictionary.set('leftforearm', 'Antebrazo izq');\ndictionary.set('leftleg', 'Pierna izq');\ndictionary.set('neck', 'Cuello');\ndictionary.set('rightarm', 'Brazo der');\ndictionary.set('rightcalve', 'Pantorrilla der');\ndictionary.set('rightforearm', 'Antebrazo izq');\ndictionary.set('rightleg', 'Pierna der');\ndictionary.set('waist', 'Cintura');\ndictionary.set('weight', 'Peso');\nconst options = {\n  responsive: true,\n  maintainAspectRatio: true,\n  plugins: {\n    legend: {\n      display: false\n    }\n  },\n  scales: {\n    x: {\n      grid: {\n        display: true,\n        color: \"rgba(255, 255, 255, 0.2)\"\n      }\n    },\n    y: {\n      grid: {\n        display: true,\n        color: \"rgba(255, 255, 255, 0.2)\"\n      }\n    }\n  }\n};\n\n/*const compare = (a: string, b: string) => { // DD/MM/AA\r\n  const fechaA = a.split('/'), fechaB = b.split('/');\r\n\r\n  if (fechaA[2] < fechaB[2]) return -1; else if (fechaA[2] > fechaB[2]) return 1;\r\n  if (fechaA[1] < fechaB[1]) return -1; else if (fechaA[1] > fechaB[1]) return 1;\r\n  if (fechaA[0] < fechaB[0]) return -1; else return 0;\r\n}*/\n\nexport const Data = _ref => {\n  let {\n    data\n  } = _ref;\n  const getArrayMax = () => {\n    //const arr: Set<number> = new Set();\n    const arr = [];\n    let max = 0;\n    for (let i = 0; i < Object.keys(data).length; i++) {\n      const key = Object.keys(data)[i];\n      const value = data[key];\n      if (value.measurements.length > max) max = value.measurements.length;\n\n      /*for (let j = 0; j < value.dates.length; j++) {\r\n        const date = new Date(value.dates[j]);\r\n        arr.add(`${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`);\r\n      }*/\n    }\n\n    for (let i = 0; i < max; i++) {\n      arr.push(i + 1);\n    }\n    return arr;\n  };\n  const getAllDatasets = () => {\n    const arr = [];\n    for (let i = 0; i < Object.keys(data).length; i++) {\n      const key = Object.keys(data)[i];\n      const value = data[key];\n      arr.push({\n        label: dictionary.get(key) || \"\",\n        data: value.measurements,\n        borderColor: mapBorderColor.get(key) || \"#FFFFFF\",\n        backgroundColor: \"#FFFFFF\"\n      });\n    }\n    return arr;\n  };\n  const getDatasets = () => {\n    return {\n      labels: getArrayMax(),\n      //labels: Array.from(getArrayDates()).sort(compare),\n      datasets: getAllDatasets()\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    className: styles.inside_graph,\n    options: options,\n    data: getDatasets()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_c = Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","styles","Line","jsxDEV","_jsxDEV","mapBorderColor","Map","set","dictionary","options","responsive","maintainAspectRatio","plugins","legend","display","scales","x","grid","color","y","Data","_ref","data","getArrayMax","arr","max","i","Object","keys","length","key","value","measurements","push","getAllDatasets","label","get","borderColor","backgroundColor","getDatasets","labels","datasets","className","inside_graph","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/danie/Documents/natgas/client/src/pages/Progreso/Data/Data.tsx"],"sourcesContent":["import React from 'react'\r\nimport styles from \"../style.module.css\"\r\nimport { Line } from 'react-chartjs-2';\r\nimport { IMeasurements, IDataset } from \"../Progress.types\";\r\n\r\ninterface Props {\r\n  data: IMeasurements;\r\n}\r\n\r\nconst mapBorderColor: Map<string, string> = new Map();\r\nmapBorderColor.set(\"weight\", \"#FF6159\");\r\nmapBorderColor.set(\"neck\", \"#50514F\");\r\nmapBorderColor.set(\"chest\", \"#B63D96\");\r\nmapBorderColor.set(\"leftarm\", \"#68954F\");\r\nmapBorderColor.set(\"rightarm\", \"#54B399\");\r\nmapBorderColor.set(\"leftforearm\", \"#FF6159\");\r\nmapBorderColor.set(\"rightforearm\", \"#805EA5\");\r\nmapBorderColor.set(\"waist\", \"#BF2727\");\r\nmapBorderColor.set(\"hip\", \"#322F87\");\r\nmapBorderColor.set(\"leftleg\", '#247BA0');\r\nmapBorderColor.set(\"rightleg\", '#5B1B18');\r\nmapBorderColor.set(\"leftcalve\", '#292828');\r\nmapBorderColor.set(\"rightcalve\", '#DDBB21');\r\n\r\nconst dictionary = new Map<string, string>();\r\ndictionary.set('chest', 'Pecho');\r\ndictionary.set('hip', 'Cadera');\r\ndictionary.set('leftarm', 'Brazo izq');\r\ndictionary.set('leftcalve', 'Pantorrilla izq');\r\ndictionary.set('leftforearm', 'Antebrazo izq');\r\ndictionary.set('leftleg', 'Pierna izq');\r\ndictionary.set('neck', 'Cuello');\r\ndictionary.set('rightarm', 'Brazo der');\r\ndictionary.set('rightcalve', 'Pantorrilla der');\r\ndictionary.set('rightforearm', 'Antebrazo izq');\r\ndictionary.set('rightleg', 'Pierna der');\r\ndictionary.set('waist', 'Cintura');\r\ndictionary.set('weight', 'Peso');\r\n\r\nconst options = {\r\n  responsive: true,\r\n\r\n  maintainAspectRatio: true,\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n  },\r\n  scales: {\r\n    x: {\r\n      grid: {\r\n        display: true,\r\n        color: \"rgba(255, 255, 255, 0.2)\",\r\n      }\r\n    },\r\n    y: {\r\n      grid: {\r\n        display: true,\r\n        color: \"rgba(255, 255, 255, 0.2)\",\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\n\r\n/*const compare = (a: string, b: string) => { // DD/MM/AA\r\n  const fechaA = a.split('/'), fechaB = b.split('/');\r\n\r\n  if (fechaA[2] < fechaB[2]) return -1; else if (fechaA[2] > fechaB[2]) return 1;\r\n  if (fechaA[1] < fechaB[1]) return -1; else if (fechaA[1] > fechaB[1]) return 1;\r\n  if (fechaA[0] < fechaB[0]) return -1; else return 0;\r\n}*/\r\n\r\nexport const Data = ({\r\n  data\r\n}: Props) => {\r\n\r\n  const getArrayMax = (): number[] => {\r\n    //const arr: Set<number> = new Set();\r\n    const arr: number[] = [];\r\n    let max = 0;\r\n\r\n    for (let i = 0; i < Object.keys(data).length; i++) {\r\n      const key = Object.keys(data)[i];\r\n      const value = data[key];\r\n\r\n      if(value.measurements.length > max) max = value.measurements.length;\r\n\r\n      /*for (let j = 0; j < value.dates.length; j++) {\r\n        const date = new Date(value.dates[j]);\r\n        arr.add(`${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`);\r\n      }*/\r\n    }\r\n\r\n    for(let i = 0; i < max; i++){\r\n      arr.push(i + 1);\r\n    }\r\n\r\n    return arr;\r\n  };\r\n\r\n  const getAllDatasets = (): Array<IDataset> => {\r\n    const arr: Array<IDataset> = [];\r\n\r\n    for (let i = 0; i < Object.keys(data).length; i++) {\r\n      const key = Object.keys(data)[i];\r\n      const value = data[key];\r\n\r\n      arr.push({\r\n        label: dictionary.get(key) || \"\",\r\n        data: value.measurements,\r\n        borderColor: mapBorderColor.get(key) || \"#FFFFFF\",\r\n        backgroundColor: \"#FFFFFF\"\r\n      })\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  const getDatasets = (): any => {      \r\n    return { \r\n      labels: getArrayMax(),     \r\n      //labels: Array.from(getArrayDates()).sort(compare),\r\n      datasets: getAllDatasets(),\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Line className={styles.inside_graph} options={options} data={getDatasets()}></Line>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}