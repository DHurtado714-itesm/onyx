{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Documents\\\\natgas\\\\client\\\\src\\\\layouts\\\\Auth\\\\AuthLayout.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useContext, useEffect } from 'react';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport { getAuthClient } from \"../../routes/auth/auth.routes\";\nimport { setClientIdCache } from \"../../cache/auth\";\nimport routes from \"../../routes/protected\";\nimport Loader from \"./Loader\";\nimport { AppContext } from \"../../App\";\nimport MessagesLayout from \"../Messages/Messages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet controllerFetch = false;\nconst AuthLayout = () => {\n  _s();\n  const {\n    setUser,\n    user\n  } = useContext(AppContext);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const checkRoutes = data => {\n    // If auth\n    if (routes.unprotectedRoutes.has(location.pathname) && data !== null) {\n      // Redirect\n      navigate(\"/\");\n      return;\n    }\n\n    // If no auth\n    if (routes.protectedRoutes.has(location.pathname) && data === null) {\n      // Redirect\n      navigate(\"/\");\n      return;\n    }\n  };\n  const getClient = () => {\n    getParams();\n    const doFetch = async () => {\n      setIsLoading(true);\n      const resData = await getAuthClient();\n      setIsLoading(false);\n      if (resData === null) {\n        setUser(null);\n        navigate(\"/\");\n        return;\n      }\n      const data = resData.data.user;\n      setUser(data);\n      checkRoutes(data);\n    };\n    void doFetch();\n  };\n  const getParams = () => {\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n    for (let i = 0; i < Object.keys(params).length; i++) {\n      const key = Object.keys(params)[i];\n      const value = params[key];\n      if (key === \"token\") {\n        setClientIdCache(value);\n        break;\n      }\n    }\n  };\n  useEffect(() => {\n    if (controllerFetch) return;\n    controllerFetch = true;\n    getClient();\n  }, []);\n  useEffect(() => {\n    if (isLoading) return;\n    checkRoutes(user);\n  }, [location, user, isLoading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(MessagesLayout, {\n      children: !isLoading && /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(AuthLayout, \"pObOWrBTXRIiIxxoQfmpUGV31nE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = AuthLayout;\nexport default AuthLayout;\nvar _c;\n$RefreshReg$(_c, \"AuthLayout\");","map":{"version":3,"names":["useState","useContext","useEffect","Outlet","useNavigate","useLocation","getAuthClient","setClientIdCache","routes","Loader","AppContext","MessagesLayout","jsxDEV","_jsxDEV","Fragment","_Fragment","controllerFetch","AuthLayout","_s","setUser","user","location","navigate","isLoading","setIsLoading","checkRoutes","data","unprotectedRoutes","has","pathname","protectedRoutes","getClient","getParams","doFetch","resData","urlSearchParams","URLSearchParams","window","search","params","Object","fromEntries","entries","i","keys","length","key","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/danie/Documents/natgas/client/src/layouts/Auth/AuthLayout.tsx"],"sourcesContent":["import { useState, useContext, useEffect } from 'react';\r\nimport { Outlet, useNavigate } from 'react-router-dom';\r\nimport { useLocation } from 'react-router';\r\nimport { getAuthClient } from \"../../routes/auth/auth.routes\";\r\nimport { setClientIdCache } from \"../../cache/auth\";\r\nimport routes from \"../../routes/protected\";\r\nimport Loader from \"./Loader\";\r\nimport { AppContext } from \"../../App\";\r\nimport { IUser } from \"../../interfaces/User.interfaces\";\r\nimport MessagesLayout from \"../Messages/Messages\";\r\n\r\nlet controllerFetch: boolean = false;\r\n\r\nconst AuthLayout = () => {\r\n    const { setUser, user } = useContext(AppContext);\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n    const checkRoutes = (data: IUser | null): void => {\r\n        // If auth\r\n        if (routes.unprotectedRoutes.has(location.pathname) && data !== null) {\r\n            // Redirect\r\n            navigate(\"/\");\r\n            return;\r\n        }\r\n\r\n        // If no auth\r\n        if (routes.protectedRoutes.has(location.pathname) && data === null) {\r\n            // Redirect\r\n            navigate(\"/\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    const getClient = (): void => {\r\n        getParams();\r\n\r\n        const doFetch = async (): Promise<void> => {\r\n            setIsLoading(true);\r\n            const resData = await getAuthClient();\r\n            setIsLoading(false);\r\n\r\n            if (resData === null) {\r\n                setUser(null);\r\n                navigate(\"/\");\r\n                return;\r\n            }\r\n\r\n            const data = resData.data.user;\r\n\r\n            setUser(data)\r\n            checkRoutes(data);\r\n        };\r\n\r\n        void doFetch();\r\n    };\r\n\r\n    const getParams = () => {\r\n        const urlSearchParams = new URLSearchParams(window.location.search);\r\n        const params = Object.fromEntries(urlSearchParams.entries());\r\n        for (let i = 0; i < Object.keys(params).length; i++) {\r\n            const key = Object.keys(params)[i];\r\n            const value = params[key];\r\n\r\n            if (key === \"token\") {\r\n                setClientIdCache(value);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (controllerFetch) return;\r\n        controllerFetch = true;\r\n        getClient();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isLoading) return;\r\n        checkRoutes(user);\r\n    }, [location, user, isLoading]);\r\n\r\n    return (\r\n        <>\r\n            {isLoading && (\r\n                <Loader />\r\n            )}\r\n            <MessagesLayout>\r\n                {!isLoading && <Outlet />}\r\n            </MessagesLayout>\r\n        </>\r\n    )\r\n};\r\nexport default AuthLayout;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}